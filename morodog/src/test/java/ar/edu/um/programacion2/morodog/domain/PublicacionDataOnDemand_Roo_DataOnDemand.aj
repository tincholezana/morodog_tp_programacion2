// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.morodog.domain;

import ar.edu.um.programacion2.morodog.domain.Publicacion;
import ar.edu.um.programacion2.morodog.domain.PublicacionDataOnDemand;
import ar.edu.um.programacion2.morodog.domain.Usuario;
import ar.edu.um.programacion2.morodog.domain.UsuarioDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PublicacionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PublicacionDataOnDemand: @Component;
    
    private Random PublicacionDataOnDemand.rnd = new SecureRandom();
    
    private List<Publicacion> PublicacionDataOnDemand.data;
    
    @Autowired
    UsuarioDataOnDemand PublicacionDataOnDemand.usuarioDataOnDemand;
    
    public Publicacion PublicacionDataOnDemand.getNewTransientPublicacion(int index) {
        Publicacion obj = new Publicacion();
        setFecha(obj, index);
        setTexto(obj, index);
        setUsuario(obj, index);
        return obj;
    }
    
    public void PublicacionDataOnDemand.setFecha(Publicacion obj, int index) {
        Date fecha = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFecha(fecha);
    }
    
    public void PublicacionDataOnDemand.setTexto(Publicacion obj, int index) {
        String texto = "texto_" + index;
        if (texto.length() > 140) {
            texto = texto.substring(0, 140);
        }
        obj.setTexto(texto);
    }
    
    public void PublicacionDataOnDemand.setUsuario(Publicacion obj, int index) {
        Usuario usuario = usuarioDataOnDemand.getRandomUsuario();
        obj.setUsuario(usuario);
    }
    
    public Publicacion PublicacionDataOnDemand.getSpecificPublicacion(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Publicacion obj = data.get(index);
        Long id = obj.getId();
        return Publicacion.findPublicacion(id);
    }
    
    public Publicacion PublicacionDataOnDemand.getRandomPublicacion() {
        init();
        Publicacion obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Publicacion.findPublicacion(id);
    }
    
    public boolean PublicacionDataOnDemand.modifyPublicacion(Publicacion obj) {
        return false;
    }
    
    public void PublicacionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Publicacion.findPublicacionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Publicacion' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Publicacion>();
        for (int i = 0; i < 10; i++) {
            Publicacion obj = getNewTransientPublicacion(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
