// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.morodog.web;

import ar.edu.um.programacion2.morodog.domain.Publicacion;
import ar.edu.um.programacion2.morodog.domain.RePublicacion;
import ar.edu.um.programacion2.morodog.domain.Usuario;
import ar.edu.um.programacion2.morodog.web.RePublicacionController;
import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect RePublicacionController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByFechaBetween", "form" }, method = RequestMethod.GET)
    public String RePublicacionController.findRePublicacionsByFechaBetweenForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        return "republicacions/findRePublicacionsByFechaBetween";
    }
    
    @RequestMapping(params = "find=ByFechaBetween", method = RequestMethod.GET)
    public String RePublicacionController.findRePublicacionsByFechaBetween(@RequestParam("minFecha") @DateTimeFormat(style = "M-") Date minFecha, @RequestParam("maxFecha") @DateTimeFormat(style = "M-") Date maxFecha, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("republicacions", RePublicacion.findRePublicacionsByFechaBetween(minFecha, maxFecha, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) RePublicacion.countFindRePublicacionsByFechaBetween(minFecha, maxFecha) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("republicacions", RePublicacion.findRePublicacionsByFechaBetween(minFecha, maxFecha, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "republicacions/list";
    }
    
    @RequestMapping(params = { "find=ByIdUsuario", "form" }, method = RequestMethod.GET)
    public String RePublicacionController.findRePublicacionsByIdUsuarioForm(Model uiModel) {
        uiModel.addAttribute("usuarios", Usuario.findAllUsuarios());
        return "republicacions/findRePublicacionsByIdUsuario";
    }
    
    @RequestMapping(params = "find=ByIdUsuario", method = RequestMethod.GET)
    public String RePublicacionController.findRePublicacionsByIdUsuario(@RequestParam("idUsuario") Usuario idUsuario, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("republicacions", RePublicacion.findRePublicacionsByIdUsuario(idUsuario, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) RePublicacion.countFindRePublicacionsByIdUsuario(idUsuario) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("republicacions", RePublicacion.findRePublicacionsByIdUsuario(idUsuario, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "republicacions/list";
    }
    
    @RequestMapping(params = { "find=ByPublicacion", "form" }, method = RequestMethod.GET)
    public String RePublicacionController.findRePublicacionsByPublicacionForm(Model uiModel) {
        uiModel.addAttribute("publicacions", Publicacion.findAllPublicacions());
        return "republicacions/findRePublicacionsByPublicacion";
    }
    
    @RequestMapping(params = "find=ByPublicacion", method = RequestMethod.GET)
    public String RePublicacionController.findRePublicacionsByPublicacion(@RequestParam("publicacion") Publicacion publicacion, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("republicacions", RePublicacion.findRePublicacionsByPublicacion(publicacion, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) RePublicacion.countFindRePublicacionsByPublicacion(publicacion) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("republicacions", RePublicacion.findRePublicacionsByPublicacion(publicacion, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "republicacions/list";
    }
    
}
