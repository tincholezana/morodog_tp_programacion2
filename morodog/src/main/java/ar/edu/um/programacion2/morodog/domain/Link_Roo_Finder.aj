// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.morodog.domain;

import ar.edu.um.programacion2.morodog.domain.Link;
import ar.edu.um.programacion2.morodog.domain.Publicacion;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Link_Roo_Finder {
    
    public static Long Link.countFindLinksByNombreEquals(String nombre) {
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        EntityManager em = Link.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Link AS o WHERE o.nombre = :nombre", Long.class);
        q.setParameter("nombre", nombre);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Link.countFindLinksByPublicacion(Set<Publicacion> publicacion) {
        if (publicacion == null) throw new IllegalArgumentException("The publicacion argument is required");
        EntityManager em = Link.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT COUNT(o) FROM Link AS o WHERE");
        for (int i = 0; i < publicacion.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :publicacion_item").append(i).append(" MEMBER OF o.publicacion");
        }
        TypedQuery q = em.createQuery(queryBuilder.toString(), Long.class);
        int publicacionIndex = 0;
        for (Publicacion _publicacion: publicacion) {
            q.setParameter("publicacion_item" + publicacionIndex++, _publicacion);
        }
        return ((Long) q.getSingleResult());
    }
    
    public static Long Link.countFindLinksByUrlEquals(String url) {
        if (url == null || url.length() == 0) throw new IllegalArgumentException("The url argument is required");
        EntityManager em = Link.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Link AS o WHERE o.url = :url", Long.class);
        q.setParameter("url", url);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Link> Link.findLinksByNombreEquals(String nombre) {
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        EntityManager em = Link.entityManager();
        TypedQuery<Link> q = em.createQuery("SELECT o FROM Link AS o WHERE o.nombre = :nombre", Link.class);
        q.setParameter("nombre", nombre);
        return q;
    }
    
    public static TypedQuery<Link> Link.findLinksByNombreEquals(String nombre, String sortFieldName, String sortOrder) {
        if (nombre == null || nombre.length() == 0) throw new IllegalArgumentException("The nombre argument is required");
        EntityManager em = Link.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Link AS o WHERE o.nombre = :nombre");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Link> q = em.createQuery(queryBuilder.toString(), Link.class);
        q.setParameter("nombre", nombre);
        return q;
    }
    
    public static TypedQuery<Link> Link.findLinksByPublicacion(Set<Publicacion> publicacion) {
        if (publicacion == null) throw new IllegalArgumentException("The publicacion argument is required");
        EntityManager em = Link.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Link AS o WHERE");
        for (int i = 0; i < publicacion.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :publicacion_item").append(i).append(" MEMBER OF o.publicacion");
        }
        TypedQuery<Link> q = em.createQuery(queryBuilder.toString(), Link.class);
        int publicacionIndex = 0;
        for (Publicacion _publicacion: publicacion) {
            q.setParameter("publicacion_item" + publicacionIndex++, _publicacion);
        }
        return q;
    }
    
    public static TypedQuery<Link> Link.findLinksByPublicacion(Set<Publicacion> publicacion, String sortFieldName, String sortOrder) {
        if (publicacion == null) throw new IllegalArgumentException("The publicacion argument is required");
        EntityManager em = Link.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Link AS o WHERE");
        for (int i = 0; i < publicacion.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :publicacion_item").append(i).append(" MEMBER OF o.publicacion");
        }
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" " + sortOrder);
            }
        }
        TypedQuery<Link> q = em.createQuery(queryBuilder.toString(), Link.class);
        int publicacionIndex = 0;
        for (Publicacion _publicacion: publicacion) {
            q.setParameter("publicacion_item" + publicacionIndex++, _publicacion);
        }
        return q;
    }
    
    public static TypedQuery<Link> Link.findLinksByUrlEquals(String url) {
        if (url == null || url.length() == 0) throw new IllegalArgumentException("The url argument is required");
        EntityManager em = Link.entityManager();
        TypedQuery<Link> q = em.createQuery("SELECT o FROM Link AS o WHERE o.url = :url", Link.class);
        q.setParameter("url", url);
        return q;
    }
    
    public static TypedQuery<Link> Link.findLinksByUrlEquals(String url, String sortFieldName, String sortOrder) {
        if (url == null || url.length() == 0) throw new IllegalArgumentException("The url argument is required");
        EntityManager em = Link.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Link AS o WHERE o.url = :url");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Link> q = em.createQuery(queryBuilder.toString(), Link.class);
        q.setParameter("url", url);
        return q;
    }
    
}
