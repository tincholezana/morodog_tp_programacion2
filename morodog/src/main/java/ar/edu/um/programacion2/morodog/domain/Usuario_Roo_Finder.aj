// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.morodog.domain;

import ar.edu.um.programacion2.morodog.domain.Usuario;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Usuario_Roo_Finder {
    
    public static Long Usuario.countFindUsuariosByActivoNot(Boolean activo) {
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE o.activo IS NOT :activo", Long.class);
        q.setParameter("activo", activo);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Usuario.countFindUsuariosByApellidoLike(String apellido) {
        if (apellido == null || apellido.length() == 0) throw new IllegalArgumentException("The apellido argument is required");
        apellido = apellido.replace('*', '%');
        if (apellido.charAt(0) != '%') {
            apellido = "%" + apellido;
        }
        if (apellido.charAt(apellido.length() - 1) != '%') {
            apellido = apellido + "%";
        }
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE LOWER(o.apellido) LIKE LOWER(:apellido)", Long.class);
        q.setParameter("apellido", apellido);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Usuario.countFindUsuariosByEMailLike(String eMail) {
        if (eMail == null || eMail.length() == 0) throw new IllegalArgumentException("The eMail argument is required");
        eMail = eMail.replace('*', '%');
        if (eMail.charAt(0) != '%') {
            eMail = "%" + eMail;
        }
        if (eMail.charAt(eMail.length() - 1) != '%') {
            eMail = eMail + "%";
        }
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE LOWER(o.eMail) LIKE LOWER(:eMail)", Long.class);
        q.setParameter("eMail", eMail);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Usuario.countFindUsuariosByNombreUsuarioEquals(String nombreUsuario) {
        if (nombreUsuario == null || nombreUsuario.length() == 0) throw new IllegalArgumentException("The nombreUsuario argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE o.nombreUsuario = :nombreUsuario", Long.class);
        q.setParameter("nombreUsuario", nombreUsuario);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Usuario.countFindUsuariosByPasswordEquals(String password) {
        if (password == null || password.length() == 0) throw new IllegalArgumentException("The password argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE o.password = :password", Long.class);
        q.setParameter("password", password);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByActivoNot(Boolean activo) {
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.activo IS NOT :activo", Usuario.class);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByActivoNot(Boolean activo, String sortFieldName, String sortOrder) {
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Usuario.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Usuario AS o WHERE o.activo IS NOT :activo");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Usuario> q = em.createQuery(queryBuilder.toString(), Usuario.class);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByApellidoLike(String apellido) {
        if (apellido == null || apellido.length() == 0) throw new IllegalArgumentException("The apellido argument is required");
        apellido = apellido.replace('*', '%');
        if (apellido.charAt(0) != '%') {
            apellido = "%" + apellido;
        }
        if (apellido.charAt(apellido.length() - 1) != '%') {
            apellido = apellido + "%";
        }
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE LOWER(o.apellido) LIKE LOWER(:apellido)", Usuario.class);
        q.setParameter("apellido", apellido);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByApellidoLike(String apellido, String sortFieldName, String sortOrder) {
        if (apellido == null || apellido.length() == 0) throw new IllegalArgumentException("The apellido argument is required");
        apellido = apellido.replace('*', '%');
        if (apellido.charAt(0) != '%') {
            apellido = "%" + apellido;
        }
        if (apellido.charAt(apellido.length() - 1) != '%') {
            apellido = apellido + "%";
        }
        EntityManager em = Usuario.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Usuario AS o WHERE LOWER(o.apellido) LIKE LOWER(:apellido)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Usuario> q = em.createQuery(queryBuilder.toString(), Usuario.class);
        q.setParameter("apellido", apellido);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByEMailLike(String eMail) {
        if (eMail == null || eMail.length() == 0) throw new IllegalArgumentException("The eMail argument is required");
        eMail = eMail.replace('*', '%');
        if (eMail.charAt(0) != '%') {
            eMail = "%" + eMail;
        }
        if (eMail.charAt(eMail.length() - 1) != '%') {
            eMail = eMail + "%";
        }
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE LOWER(o.eMail) LIKE LOWER(:eMail)", Usuario.class);
        q.setParameter("eMail", eMail);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByEMailLike(String eMail, String sortFieldName, String sortOrder) {
        if (eMail == null || eMail.length() == 0) throw new IllegalArgumentException("The eMail argument is required");
        eMail = eMail.replace('*', '%');
        if (eMail.charAt(0) != '%') {
            eMail = "%" + eMail;
        }
        if (eMail.charAt(eMail.length() - 1) != '%') {
            eMail = eMail + "%";
        }
        EntityManager em = Usuario.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Usuario AS o WHERE LOWER(o.eMail) LIKE LOWER(:eMail)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Usuario> q = em.createQuery(queryBuilder.toString(), Usuario.class);
        q.setParameter("eMail", eMail);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByNombreUsuarioEquals(String nombreUsuario) {
        if (nombreUsuario == null || nombreUsuario.length() == 0) throw new IllegalArgumentException("The nombreUsuario argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.nombreUsuario = :nombreUsuario", Usuario.class);
        q.setParameter("nombreUsuario", nombreUsuario);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByNombreUsuarioEquals(String nombreUsuario, String sortFieldName, String sortOrder) {
        if (nombreUsuario == null || nombreUsuario.length() == 0) throw new IllegalArgumentException("The nombreUsuario argument is required");
        EntityManager em = Usuario.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Usuario AS o WHERE o.nombreUsuario = :nombreUsuario");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Usuario> q = em.createQuery(queryBuilder.toString(), Usuario.class);
        q.setParameter("nombreUsuario", nombreUsuario);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByPasswordEquals(String password) {
        if (password == null || password.length() == 0) throw new IllegalArgumentException("The password argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.password = :password", Usuario.class);
        q.setParameter("password", password);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByPasswordEquals(String password, String sortFieldName, String sortOrder) {
        if (password == null || password.length() == 0) throw new IllegalArgumentException("The password argument is required");
        EntityManager em = Usuario.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Usuario AS o WHERE o.password = :password");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Usuario> q = em.createQuery(queryBuilder.toString(), Usuario.class);
        q.setParameter("password", password);
        return q;
    }
    
}
