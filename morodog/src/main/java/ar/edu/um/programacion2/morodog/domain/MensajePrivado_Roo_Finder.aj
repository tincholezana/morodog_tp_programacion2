// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.morodog.domain;

import ar.edu.um.programacion2.morodog.domain.MensajePrivado;
import ar.edu.um.programacion2.morodog.domain.Usuario;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect MensajePrivado_Roo_Finder {
    
    public static Long MensajePrivado.countFindMensajePrivadoesByIdUsuarioEmisor(Usuario idUsuarioEmisor) {
        if (idUsuarioEmisor == null) throw new IllegalArgumentException("The idUsuarioEmisor argument is required");
        EntityManager em = MensajePrivado.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM MensajePrivado AS o WHERE o.idUsuarioEmisor = :idUsuarioEmisor", Long.class);
        q.setParameter("idUsuarioEmisor", idUsuarioEmisor);
        return ((Long) q.getSingleResult());
    }
    
    public static Long MensajePrivado.countFindMensajePrivadoesByIdUsuarioReceptorEquals(Integer idUsuarioReceptor) {
        if (idUsuarioReceptor == null) throw new IllegalArgumentException("The idUsuarioReceptor argument is required");
        EntityManager em = MensajePrivado.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM MensajePrivado AS o WHERE o.idUsuarioReceptor = :idUsuarioReceptor", Long.class);
        q.setParameter("idUsuarioReceptor", idUsuarioReceptor);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<MensajePrivado> MensajePrivado.findMensajePrivadoesByIdUsuarioEmisor(Usuario idUsuarioEmisor) {
        if (idUsuarioEmisor == null) throw new IllegalArgumentException("The idUsuarioEmisor argument is required");
        EntityManager em = MensajePrivado.entityManager();
        TypedQuery<MensajePrivado> q = em.createQuery("SELECT o FROM MensajePrivado AS o WHERE o.idUsuarioEmisor = :idUsuarioEmisor", MensajePrivado.class);
        q.setParameter("idUsuarioEmisor", idUsuarioEmisor);
        return q;
    }
    
    public static TypedQuery<MensajePrivado> MensajePrivado.findMensajePrivadoesByIdUsuarioEmisor(Usuario idUsuarioEmisor, String sortFieldName, String sortOrder) {
        if (idUsuarioEmisor == null) throw new IllegalArgumentException("The idUsuarioEmisor argument is required");
        EntityManager em = MensajePrivado.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM MensajePrivado AS o WHERE o.idUsuarioEmisor = :idUsuarioEmisor");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<MensajePrivado> q = em.createQuery(queryBuilder.toString(), MensajePrivado.class);
        q.setParameter("idUsuarioEmisor", idUsuarioEmisor);
        return q;
    }
    
    public static TypedQuery<MensajePrivado> MensajePrivado.findMensajePrivadoesByIdUsuarioReceptorEquals(Integer idUsuarioReceptor) {
        if (idUsuarioReceptor == null) throw new IllegalArgumentException("The idUsuarioReceptor argument is required");
        EntityManager em = MensajePrivado.entityManager();
        TypedQuery<MensajePrivado> q = em.createQuery("SELECT o FROM MensajePrivado AS o WHERE o.idUsuarioReceptor = :idUsuarioReceptor", MensajePrivado.class);
        q.setParameter("idUsuarioReceptor", idUsuarioReceptor);
        return q;
    }
    
    public static TypedQuery<MensajePrivado> MensajePrivado.findMensajePrivadoesByIdUsuarioReceptorEquals(Integer idUsuarioReceptor, String sortFieldName, String sortOrder) {
        if (idUsuarioReceptor == null) throw new IllegalArgumentException("The idUsuarioReceptor argument is required");
        EntityManager em = MensajePrivado.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM MensajePrivado AS o WHERE o.idUsuarioReceptor = :idUsuarioReceptor");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<MensajePrivado> q = em.createQuery(queryBuilder.toString(), MensajePrivado.class);
        q.setParameter("idUsuarioReceptor", idUsuarioReceptor);
        return q;
    }
    
}
