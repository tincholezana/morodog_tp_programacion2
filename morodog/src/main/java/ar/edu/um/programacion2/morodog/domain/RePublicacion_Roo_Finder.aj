// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.morodog.domain;

import ar.edu.um.programacion2.morodog.domain.Publicacion;
import ar.edu.um.programacion2.morodog.domain.RePublicacion;
import ar.edu.um.programacion2.morodog.domain.Usuario;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect RePublicacion_Roo_Finder {
    
    public static Long RePublicacion.countFindRePublicacionsByFechaBetween(Date minFecha, Date maxFecha) {
        if (minFecha == null) throw new IllegalArgumentException("The minFecha argument is required");
        if (maxFecha == null) throw new IllegalArgumentException("The maxFecha argument is required");
        EntityManager em = RePublicacion.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM RePublicacion AS o WHERE o.fecha BETWEEN :minFecha AND :maxFecha", Long.class);
        q.setParameter("minFecha", minFecha);
        q.setParameter("maxFecha", maxFecha);
        return ((Long) q.getSingleResult());
    }
    
    public static Long RePublicacion.countFindRePublicacionsByIdUsuario(Usuario idUsuario) {
        if (idUsuario == null) throw new IllegalArgumentException("The idUsuario argument is required");
        EntityManager em = RePublicacion.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM RePublicacion AS o WHERE o.idUsuario = :idUsuario", Long.class);
        q.setParameter("idUsuario", idUsuario);
        return ((Long) q.getSingleResult());
    }
    
    public static Long RePublicacion.countFindRePublicacionsByPublicacion(Publicacion publicacion) {
        if (publicacion == null) throw new IllegalArgumentException("The publicacion argument is required");
        EntityManager em = RePublicacion.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM RePublicacion AS o WHERE o.publicacion = :publicacion", Long.class);
        q.setParameter("publicacion", publicacion);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<RePublicacion> RePublicacion.findRePublicacionsByFechaBetween(Date minFecha, Date maxFecha) {
        if (minFecha == null) throw new IllegalArgumentException("The minFecha argument is required");
        if (maxFecha == null) throw new IllegalArgumentException("The maxFecha argument is required");
        EntityManager em = RePublicacion.entityManager();
        TypedQuery<RePublicacion> q = em.createQuery("SELECT o FROM RePublicacion AS o WHERE o.fecha BETWEEN :minFecha AND :maxFecha", RePublicacion.class);
        q.setParameter("minFecha", minFecha);
        q.setParameter("maxFecha", maxFecha);
        return q;
    }
    
    public static TypedQuery<RePublicacion> RePublicacion.findRePublicacionsByFechaBetween(Date minFecha, Date maxFecha, String sortFieldName, String sortOrder) {
        if (minFecha == null) throw new IllegalArgumentException("The minFecha argument is required");
        if (maxFecha == null) throw new IllegalArgumentException("The maxFecha argument is required");
        EntityManager em = RePublicacion.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM RePublicacion AS o WHERE o.fecha BETWEEN :minFecha AND :maxFecha");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<RePublicacion> q = em.createQuery(queryBuilder.toString(), RePublicacion.class);
        q.setParameter("minFecha", minFecha);
        q.setParameter("maxFecha", maxFecha);
        return q;
    }
    
    public static TypedQuery<RePublicacion> RePublicacion.findRePublicacionsByIdUsuario(Usuario idUsuario) {
        if (idUsuario == null) throw new IllegalArgumentException("The idUsuario argument is required");
        EntityManager em = RePublicacion.entityManager();
        TypedQuery<RePublicacion> q = em.createQuery("SELECT o FROM RePublicacion AS o WHERE o.idUsuario = :idUsuario", RePublicacion.class);
        q.setParameter("idUsuario", idUsuario);
        return q;
    }
    
    public static TypedQuery<RePublicacion> RePublicacion.findRePublicacionsByIdUsuario(Usuario idUsuario, String sortFieldName, String sortOrder) {
        if (idUsuario == null) throw new IllegalArgumentException("The idUsuario argument is required");
        EntityManager em = RePublicacion.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM RePublicacion AS o WHERE o.idUsuario = :idUsuario");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<RePublicacion> q = em.createQuery(queryBuilder.toString(), RePublicacion.class);
        q.setParameter("idUsuario", idUsuario);
        return q;
    }
    
    public static TypedQuery<RePublicacion> RePublicacion.findRePublicacionsByPublicacion(Publicacion publicacion) {
        if (publicacion == null) throw new IllegalArgumentException("The publicacion argument is required");
        EntityManager em = RePublicacion.entityManager();
        TypedQuery<RePublicacion> q = em.createQuery("SELECT o FROM RePublicacion AS o WHERE o.publicacion = :publicacion", RePublicacion.class);
        q.setParameter("publicacion", publicacion);
        return q;
    }
    
    public static TypedQuery<RePublicacion> RePublicacion.findRePublicacionsByPublicacion(Publicacion publicacion, String sortFieldName, String sortOrder) {
        if (publicacion == null) throw new IllegalArgumentException("The publicacion argument is required");
        EntityManager em = RePublicacion.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM RePublicacion AS o WHERE o.publicacion = :publicacion");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<RePublicacion> q = em.createQuery(queryBuilder.toString(), RePublicacion.class);
        q.setParameter("publicacion", publicacion);
        return q;
    }
    
}
