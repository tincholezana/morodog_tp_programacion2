// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.morodog.web;

import ar.edu.um.programacion2.morodog.domain.Usuario;
import ar.edu.um.programacion2.morodog.web.UsuarioController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect UsuarioController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByActivoNot", "form" }, method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByActivoNotForm(Model uiModel) {
        return "usuarios/findUsuariosByActivoNot";
    }
    
    @RequestMapping(params = "find=ByActivoNot", method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByActivoNot(@RequestParam(value = "activo", required = false) Boolean activo, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByActivoNot(activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Usuario.countFindUsuariosByActivoNot(activo == null ? Boolean.FALSE : activo) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByActivoNot(activo == null ? Boolean.FALSE : activo, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "usuarios/list";
    }
    
    @RequestMapping(params = { "find=ByApellidoLike", "form" }, method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByApellidoLikeForm(Model uiModel) {
        return "usuarios/findUsuariosByApellidoLike";
    }
    
    @RequestMapping(params = "find=ByApellidoLike", method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByApellidoLike(@RequestParam("apellido") String apellido, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByApellidoLike(apellido, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Usuario.countFindUsuariosByApellidoLike(apellido) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByApellidoLike(apellido, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "usuarios/list";
    }
    
    @RequestMapping(params = { "find=ByEMailLike", "form" }, method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByEMailLikeForm(Model uiModel) {
        return "usuarios/findUsuariosByEMailLike";
    }
    
    @RequestMapping(params = "find=ByEMailLike", method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByEMailLike(@RequestParam("EMail") String eMail, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByEMailLike(eMail, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Usuario.countFindUsuariosByEMailLike(eMail) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByEMailLike(eMail, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "usuarios/list";
    }
    
    @RequestMapping(params = { "find=ByNombreUsuarioEquals", "form" }, method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByNombreUsuarioEqualsForm(Model uiModel) {
        return "usuarios/findUsuariosByNombreUsuarioEquals";
    }
    
    @RequestMapping(params = "find=ByNombreUsuarioEquals", method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByNombreUsuarioEquals(@RequestParam("nombreUsuario") String nombreUsuario, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByNombreUsuarioEquals(nombreUsuario, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Usuario.countFindUsuariosByNombreUsuarioEquals(nombreUsuario) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByNombreUsuarioEquals(nombreUsuario, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "usuarios/list";
    }
    
    @RequestMapping(params = { "find=ByPasswordEquals", "form" }, method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByPasswordEqualsForm(Model uiModel) {
        return "usuarios/findUsuariosByPasswordEquals";
    }
    
    @RequestMapping(params = "find=ByPasswordEquals", method = RequestMethod.GET)
    public String UsuarioController.findUsuariosByPasswordEquals(@RequestParam("password") String password, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByPasswordEquals(password, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Usuario.countFindUsuariosByPasswordEquals(password) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("usuarios", Usuario.findUsuariosByPasswordEquals(password, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "usuarios/list";
    }
    
}
