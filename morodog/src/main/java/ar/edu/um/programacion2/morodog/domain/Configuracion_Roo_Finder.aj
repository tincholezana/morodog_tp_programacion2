// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.morodog.domain;

import ar.edu.um.programacion2.morodog.domain.Configuracion;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Configuracion_Roo_Finder {
    
    public static Long Configuracion.countFindConfiguracionsByNDiasEmail(int nDiasEmail) {
        EntityManager em = Configuracion.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Configuracion AS o WHERE o.nDiasEmail = :nDiasEmail", Long.class);
        q.setParameter("nDiasEmail", nDiasEmail);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Configuracion.countFindConfiguracionsByNDiasTendencia(int nDiasTendencia) {
        EntityManager em = Configuracion.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Configuracion AS o WHERE o.nDiasTendencia = :nDiasTendencia", Long.class);
        q.setParameter("nDiasTendencia", nDiasTendencia);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Configuracion> Configuracion.findConfiguracionsByNDiasEmail(int nDiasEmail) {
        EntityManager em = Configuracion.entityManager();
        TypedQuery<Configuracion> q = em.createQuery("SELECT o FROM Configuracion AS o WHERE o.nDiasEmail = :nDiasEmail", Configuracion.class);
        q.setParameter("nDiasEmail", nDiasEmail);
        return q;
    }
    
    public static TypedQuery<Configuracion> Configuracion.findConfiguracionsByNDiasEmail(int nDiasEmail, String sortFieldName, String sortOrder) {
        EntityManager em = Configuracion.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Configuracion AS o WHERE o.nDiasEmail = :nDiasEmail");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Configuracion> q = em.createQuery(queryBuilder.toString(), Configuracion.class);
        q.setParameter("nDiasEmail", nDiasEmail);
        return q;
    }
    
    public static TypedQuery<Configuracion> Configuracion.findConfiguracionsByNDiasTendencia(int nDiasTendencia) {
        EntityManager em = Configuracion.entityManager();
        TypedQuery<Configuracion> q = em.createQuery("SELECT o FROM Configuracion AS o WHERE o.nDiasTendencia = :nDiasTendencia", Configuracion.class);
        q.setParameter("nDiasTendencia", nDiasTendencia);
        return q;
    }
    
    public static TypedQuery<Configuracion> Configuracion.findConfiguracionsByNDiasTendencia(int nDiasTendencia, String sortFieldName, String sortOrder) {
        EntityManager em = Configuracion.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Configuracion AS o WHERE o.nDiasTendencia = :nDiasTendencia");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Configuracion> q = em.createQuery(queryBuilder.toString(), Configuracion.class);
        q.setParameter("nDiasTendencia", nDiasTendencia);
        return q;
    }
    
}
