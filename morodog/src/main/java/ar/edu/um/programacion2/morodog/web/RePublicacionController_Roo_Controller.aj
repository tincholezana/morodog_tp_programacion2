// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.morodog.web;

import ar.edu.um.programacion2.morodog.domain.Publicacion;
import ar.edu.um.programacion2.morodog.domain.RePublicacion;
import ar.edu.um.programacion2.morodog.domain.Usuario;
import ar.edu.um.programacion2.morodog.service.PublicacionService;
import ar.edu.um.programacion2.morodog.service.RePublicacionService;
import ar.edu.um.programacion2.morodog.service.UsuarioService;
import ar.edu.um.programacion2.morodog.web.RePublicacionController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect RePublicacionController_Roo_Controller {
    
    @Autowired
    UsuarioService RePublicacionController.usuarioService;
    
    @Autowired
    PublicacionService RePublicacionController.publicacionService;
    
    @Autowired
    RePublicacionService RePublicacionController.rePublicacionService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String RePublicacionController.create(@Valid RePublicacion rePublicacion, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, rePublicacion);
            return "republicacions/create";
        }
        uiModel.asMap().clear();
        rePublicacionService.saveRePublicacion(rePublicacion);
        return "redirect:/republicacions/" + encodeUrlPathSegment(rePublicacion.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String RePublicacionController.createForm(Model uiModel) {
        populateEditForm(uiModel, new RePublicacion());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (usuarioService.countAllUsuarios() == 0) {
            dependencies.add(new String[] { "idUsuario", "usuarios" });
        }
        if (publicacionService.countAllPublicacions() == 0) {
            dependencies.add(new String[] { "publicacion", "publicacions" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "republicacions/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String RePublicacionController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("republicacion", rePublicacionService.findRePublicacion(id));
        uiModel.addAttribute("itemId", id);
        return "republicacions/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String RePublicacionController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("republicacions", RePublicacion.findRePublicacionEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) rePublicacionService.countAllRePublicacions() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("republicacions", RePublicacion.findAllRePublicacions(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "republicacions/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String RePublicacionController.update(@Valid RePublicacion rePublicacion, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, rePublicacion);
            return "republicacions/update";
        }
        uiModel.asMap().clear();
        rePublicacionService.updateRePublicacion(rePublicacion);
        return "redirect:/republicacions/" + encodeUrlPathSegment(rePublicacion.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String RePublicacionController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, rePublicacionService.findRePublicacion(id));
        return "republicacions/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String RePublicacionController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        RePublicacion rePublicacion = rePublicacionService.findRePublicacion(id);
        rePublicacionService.deleteRePublicacion(rePublicacion);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/republicacions";
    }
    
    void RePublicacionController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("rePublicacion_fecha_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void RePublicacionController.populateEditForm(Model uiModel, RePublicacion rePublicacion) {
        uiModel.addAttribute("rePublicacion", rePublicacion);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("publicacions", publicacionService.findAllPublicacions());
        uiModel.addAttribute("usuarios", usuarioService.findAllUsuarios());
    }
    
    String RePublicacionController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
